data List a where
    Nil :: List a
    Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
	
zero :: {Int | _v == 0}
inc :: x: Int -> {Int | _v == x + 1}
dec :: x: Int -> {Int | _v == x - 1}	

top :: {Bool | _v}

qualifier {x == y, x == y + 1}

foldr :: <p :: List a -> b -> Bool> . <step :: b -> a -> b -> Bool> .
    g: (xs:List a -> acc:b -> x:a -> nacc:{b| p xs acc && step acc x _v} -> {b | _v == nacc && p (Cons x xs) nacc}) ->
    f: (x: a -> acc: b -> {b | step acc x _v}) ->
	seed: {b | p Nil _v} ->
    ys: List a ->
	{b | p ys _v}

length :: xs: List a -> {Int | _v == len xs}
length = \xs. foldr (\x1. \x2. \x3. \x4. x4) (\x1. \x2. inc x2) 0 xs
--length = ??