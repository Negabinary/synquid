data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
	
top :: {Bool | _v}

foldr :: <p :: List a -> b -> Bool> . <step :: b -> a -> b -> Bool> .
    g: (xs:List a -> acc:{b | p xs _v} -> x:a -> nacc:{b| step acc x _v} -> {b | _v == nacc && p (Cons x xs) nacc}) ->
    f: (x: a -> acc: b -> {b | step acc x _v}) ->
		seed: {b | p Nil _v} ->
    ys: List a ->
		{b | p ys _v}

foldr = \ggg. \fff. 
  \seed. \ys.
    match ys with
      Nil -> seed
      Cons x3 x4 -> 
        let u = (foldr ggg fff seed x4) in
        let v = fff x3 u in
        ggg x4 u x3 v